Required changes in PLACALC source code for the new CPJ2_ asteroid files
with 20-day steps:

version 12-July-1998 by Alois Treindl

File placalc.h
==============
  change the name of the asteroid files
  #define EPHE_ASTER "CPJ2_"        /* file name prefix */

  add a line
  #define AST_EPHE_STEP	20

File placalc.c
==============
Change the function outer_hel() so that it uses different values of 
EPHE_STEP depending on whether it deals with a CPJV asteroid or other body.
For this purpose a local variable estep is introduced, where originally
the #defined EPHE_STEP was used.

/************************************************************************
outer_hel()
Computes the position of Jupiter, Saturn, Uranus, Neptune, Pluto and
Chiron by reading our stored ephemeris in steps of 80 (!) days and
applying a high order interpolation to it. The interpolation errors are
less than 0.01" seconds or arc.
The stored ephemeris is  packed in a special format consisting of
32 bit numbers; it has been created on the Astrodienst Unix system
by numerical integration with routines provided originally by Marc
Pottenger, USA, which we improved for better long term precision.
Because the Unix system uses a different byte order than the MSDOS
systems, the bytes must be reordered for INTEL_BYTE_ORDER after reading from
the binary files. 

outer_hel() takes the same parameters as hel().
It returns the same type of values.

The access to the ephemeris files is done in the functions chi_file_posit()
and lrz_file_posit().
****************************************************************************/
int outer_hel( int planet, REAL8 jd_ad, REAL8 *al,  REAL8 *ar,  REAL8 *az, 
					REAL8 *alp, REAL8 *arp, REAL8 *azp )
	/* jd_ad Astrodienst relative Julian ephemeris time */
{
  static double last_j0_outer = HUGE;
  static double last_j0_chiron = HUGE;
  static double last_j0_aster = HUGE;
  static long icoord[6][5][3], chicoord[6][3], ascoord[6][4][3];
  REAL8 j0, jd, jfrac;
  REAL8 l[6], r[6], z[6];
  int i, n, order, p, estep;
  if ((planet < JUPITER || planet > PLUTO)
  && planet != CHIRON
  && (planet < CERES || planet > VESTA))
    return (ERR);
  if (planet < CERES || planet > VESTA)
    estep = EPHE_STEP;
  else
    estep = AST_EPHE_STEP;
  jd = jd_ad + JUL_OFFSET;
  j0 = floor ( (jd - 0.5) / estep) * estep + 0.5;
  jfrac = (jd - j0) / estep;
  if (planet == CHIRON ) {
    if (last_j0_chiron != j0) {
      for ( n = 0; n < 6; n++) { /* read 6 days */
	jd = j0 + (n - 2) * estep;
	if (chi_file_posit (jd, &chironfp) != OK) return (ERR);
	fread (&chicoord[n][0], sizeof(long), 3, chironfp); 
# ifdef INTEL_BYTE_ORDER
        longreorder ((UCHAR *) &chicoord[n][0], 3 * sizeof(long));
# endif
      }
      last_j0_chiron = j0;
    }
    for ( n = 0; n < 6; n++) {
      l[n] = chicoord[n][0] / DEG2MSEC;
      r[n] = chicoord[n][1] / AU2INT;
      z[n] = chicoord[n][2] / AU2INT;
    } 	/* for n */
  } else if (planet >= CERES && planet <= VESTA) {
    if (last_j0_aster != j0) {  /* read all 4 asteroids for 6 steps */
      for (n = 0; n < 6; n++) {
        jd = j0 + (n - 2) * estep;
        if (ast_file_posit(jd, &asterfp) != OK)
          return ERR;
        fread(&ascoord[n][0][0], sizeof(long), 12, asterfp);
# ifdef INTEL_BYTE_ORDER
        longreorder((UCHAR *)&ascoord[n][0][0], 12*4);
# endif
      }
      last_j0_outer = j0;
    }
    p = planet - CERES;
    for (n = 0; n < 6; n++) {
      l[n] = ascoord[n][p][0] / DEG2MSEC;
      r[n] = ascoord[n][p][1] / AU2INT;
      z[n] = ascoord[n][p][2] / AU2INT;
    }
  } else {	/* an outerplanet */
    if (last_j0_outer != j0) { /* read all 5 planets for 6 steps */
      for ( n = 0; n < 6; n++) { 
	jd = j0 + (n - 2) * estep;
	if (lrz_file_posit (jd, &outerfp) != OK) return (ERR);
	fread (&icoord[n][0][0], sizeof(long), 15, outerfp); 
# ifdef INTEL_BYTE_ORDER
        longreorder ((UCHAR *) &icoord[n][0][0], 15 * sizeof(long));
# endif
      }
      last_j0_outer = j0;
    }
    p = planet - JUPITER;
    for ( n = 0; n < 6; n++) {
      l[n] = icoord[n][p][0] / DEG2MSEC;
      r[n] = icoord[n][p][1] / AU2INT;
      z[n] = icoord[n][p][2] / AU2INT;
    } 	/* for n */
  }
  if  (planet > SATURN)
    order = 3;
  else
    order = 5;
  inpolq(2, order, jfrac, l, al, alp);
  *alp /= estep;
  inpolq(2, order, jfrac, r, ar, arp);
  *arp /= estep;
  inpolq(2, order, jfrac, z, az, azp);
  *azp /= estep;
  return OK;
}

Changes to function ast_file_posit(): replace EPHE_STEP with AST_EPHE_STEP

/*
** position cpj2 file at proper position for julian date jd;
** Return OK or ERR.  Version for asteroids.
*/
int ast_file_posit(jd, astfpp)
double jd;     /* full Julian day number, not Astrodienst relative */
FILE **astfpp; /* pointer to file pointer; this function
                  opens or closes the ephemeris file, and caller
                  should keep it open while using it. */
{
  int filenr;
  long posit, jlong;
  char fname[80];
  static int open_astnr = -10000; /* local memory to remember whether
    an already open file is the one with
    the correct number for this date */
  jlong = (long)floor(jd);
  filenr = (int)(jlong / EPHE_DAYS_PER_FILE);
  if (jlong < 0 && filenr * EPHE_DAYS_PER_FILE != jlong)
    filenr--;
  posit = jlong - filenr * EPHE_DAYS_PER_FILE;
  posit = (posit / (int)AST_EPHE_STEP) * EPHE_ASTER_BSIZE;
  if (*astfpp == NULL || open_astnr != filenr) { /* no or wrong open file */
    open_astnr = -10000;
    sprintf(fname, "%s%s%s%s%d", ephe_path, DIR_GLUE, EPHE_ASTER, filenr < 0 ? "M" : "", abs(filenr));
    if (*astfpp != NULL)
      fclose(*astfpp);
    *astfpp = fopen(fname, OPEN_EPHE);
    if (*astfpp == NULL) {
      sprintf (perrtx,"ast_file_posit: file %s does not exist", fname);
      return ERR;
    }
    open_astnr = filenr;
  }
  if (fseek(*astfpp, posit, 0) == 0)
    return OK;
  sprintf (perrtx,"ast_file_posit: fseek error %s posit %ld", fname, posit);
  return ERR; /* this fseek error occurs only with incomplete files */
}

Attention, PLACALC programmers:
This code segments represent the Astrodienst version of Placalc which
has been distrubuted to licensees.

The public version of Placalc in Walter Pullen's ASTROLOG has a few small
differences, and must be manually edited to reproduce the same changes.

